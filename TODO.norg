* ULF Todo

  Below is a list of all todos

*** Loader

    The loader is responsible for loading modules and detects if we load from
    the repository or a Luarocks tree.

    Goals: Create global ulf table and dynamicall load packages

    @code lua
    local ulf = require("ulf")

    assert(ulf == _G.ulf)
    assert(ulf._.packages) -- packages registry

    local core = ulf.core
    assert(ulf._.packages.loaded['ulf.core']) -- ulf.core is dynamically loaded
    @end

*** Logger

    The logger must be `lazy` since packages are loaded when the user 
    triggers a load event by accessing the table.

    - ( ) Logger tasks
    -- ( ) Provide `lazyness`
    --- ( ) Add methods for adding and removing loggers and config data
    -- ( ) Logging should be started as early as possible. This leads to 
           a small gap of time where the logger runs only with defaults. 
    --- ( ) Review defaults
    --- ( ) refactor setup so that it can called multiple times

*** Bootstrap Library (minilib)

    We need a small library which provides functions for loading the framework.
    See ulf.doc, ulf.log which all use some utils which can be bundled.

    - ( ) Bootstrap tasks
    -- ( ) relocate all libs to ulf.lib and import stuff from there
    -- ( ) provide functions for loading modules.
           Take a look at luvit, they have this stuff implemented.
    --- ( ) table manipulation: merging, copying
    --- ( ) string manipulation: split, trim and so on

**** ulf.doc

*** ulf.lib

    ulf.lib contains all shared functions and classes used by ulf. I would 
    like to use a pattern where each function or class has its own lua file.
    This makes it easier to maintain especially when importing code from
    other repositories.


    - ( ) Create ulf.lib 
    -- ( ) setup core library structure
    -- ( ) setup build: import from other repos and rewrite annotations

 
